<?xml version='1.0' encoding='UTF-8'?>
<project>
  <builders>
    <javaposse.jobdsl.plugin.ExecuteDslScripts plugin="job-dsl">
      <usingScriptText>true</usingScriptText>
      <scriptText><![CDATA[

job('dib') {
    displayName('diskimage-builder')
    disabled(true)

    configure { project ->
        project / triggers << 'org.jenkinsci.plugins.parameterizedscheduler.ParameterizedTimerTrigger' {
            spec ''
            parameterizedSpecification '''
######## production environment
# m h dom mon dow parameter
H/1 1 1,16 * * % DIB_OS_ELEMENT=centos;DIB_IMAGE_NAME=CentOS-6
H/1 2 1,16 * * % DIB_OS_ELEMENT=scientific6;DIB_IMAGE_NAME=Scientific-6
H/1 3 1,16 * * % DIB_OS_ELEMENT=centos7;DIB_IMAGE_NAME=CentOS-7
H/1 4 1,16 * * % DIB_OS_ELEMENT=scientific7;DIB_IMAGE_NAME=Scientific-7
H/1 5 1,16 * * % DIB_OS_ELEMENT=ubuntu;DIB_RELEASE=trusty;DIB_IMAGE_NAME=Ubuntu-14.04
H/1 6 1,16 * * % DIB_OS_ELEMENT=ubuntu;DIB_RELEASE=wily;DIB_IMAGE_NAME=Ubuntu-15.10
H/1 7 1,16 * * % DIB_OS_ELEMENT=ubuntu;DIB_RELEASE=xenial;DIB_IMAGE_NAME=Ubuntu-16.04
'''
        }
    }

    parameters {
        labelParam('NODE_LABEL') {
            defaultValue('DIB')
            allNodes('allCases', 'IgnoreOfflineNodeEligibility')
        }

        stringParam('OS_AUTH_URL', '{{ openstack_auth_url.test}}', 'Openstack Keystone URL')
        stringParam('OS_TENANT_NAME', 'imgbuild', 'project name')
        stringParam('OS_TENANT_ID', 'imgbuild', 'project id')

        stringParam('DIB_OS_ELEMENT', 'centos7', 'os element name')
        stringParam('DIB_IMAGE_NAME', 'CentOS-7', 'image name')
        stringParam('DIB_RELEASE', '', 'OS release version')
        stringParam('TEMP_IMAGE_NAME', '_temp_$DIB_IMAGE_NAME', 'temporary image name')
        stringParam('IMAGE_KEEP_COUNT', '5', 'image name')
        stringParam('DIB_IMAGE_FORMAT', 'qcow2', 'image format')
        stringParam('DIB_OPTIONS', '--no-tmpfs --qemu-img-options compat=0.10', 'options for diskimage-builder')
        stringParam('DIB_IMAGE_SIZE', '10', 'image size in GB')
        stringParam('DIB_PACKAGES', 'vim,ntp,deltarpm', 'additional packages to install')

        stringParam('HEAT_STACK_NAME', 'imgbuild', 'heat test stack name')
        stringParam('HEAT_PRIVATE_NETWORK_ID', 'imgbuild', 'the projects private network')
        stringParam('HEAT_FLOATING_IP_POOL', 'public', 'name of the floating ip pool')
        stringParam('HEAT_SECURITY_GROUP', 'ssh', 'security group to assign to test instance')

        stringParam('CLOUD_USER', 'cirros', 'username for login to test instance')
        stringParam('SSH_KEY_NAME', 'imgbuild', 'ssh keypair name to use for test instance')
        stringParam('SSH_CONNECTION_TIMEOUT', '60', 'connection timeout for ssh command')
    }

    wrappers {
        maskPasswords()
        credentialsBinding {
            usernamePassword('OS_USERNAME', 'OS_PASSWORD', 'imgbuild_os_credentials')
        }
        configFiles {
            custom('imgbuild_heat_test_stack') { variable('HEAT_FILE') }
        }
        sshAgent('imgbuild_ssh_credentials')
    }

    steps {

        shell('''
# delete any orphaned temporary images
for id in $(glance image-list --owner $OS_TENANT_ID --property name=$TEMP_IMAGE_NAME | grep $TEMP_IMAGE_NAME | awk '{print $2}')
do glance image-delete $id &>/dev/null || true; done
# delete orphaned heat stack
heat stack-delete --yes $HEAT_STACK_NAME || true
        ''')

        shell('''
#disk-image-create $DIB_OPTIONS --image-size $DIB_IMAGE_SIZE -o $DIB_IMAGE_NAME -p $DIB_PACKAGES $DIB_ELEMENTS $DIB_OS_ELEMENT
curl -O http://download.cirros-cloud.net/0.3.4/cirros-0.3.4-x86_64-disk.img
mv cirros-0.3.4-x86_64-disk.img "${DIB_IMAGE_NAME}.${DIB_IMAGE_FORMAT}"
        ''')

        shell('openstack image create --disk-format $DIB_IMAGE_FORMAT --file ${DIB_IMAGE_NAME}.${DIB_IMAGE_FORMAT} $TEMP_IMAGE_NAME')

        shell('heat stack-create --poll -f $HEAT_FILE -P image_name=$TEMP_IMAGE_NAME\\;key_name=$SSH_KEY_NAME $HEAT_STACK_NAME')

        shell('heat stack-show $HEAT_STACK_NAME | grep -e \' stack_status \' | grep -q CREATE_COMPLETE')

        shell('''
fip=$(heat resource-show  $HEAT_STACK_NAME association | grep physical_resource_id | awk -F'|' '{print $3}'); fip=${fip##*-};
ssh -T -o ConnectTimeout=$SSH_CONNECTION_TIMEOUT -o PasswordAuthentication=no -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o User=$CLOUD_USER $fip /bin/true
        ''')

        shell('heat stack-delete --yes $HEAT_STACK_NAME')

        shell('''
# delete old images, keep a number of IMAGE_KEEP_COUNT
images=($(glance image-list --sort-key created_at --sort-dir desc --owner $OS_TENANT_ID --property name=$DIB_IMAGE_NAME | grep $DIB_IMAGE_NAME | awk -F'|' '{print $2}'))
images=${images:-}

for delete in ${images[@]:$IMAGE_KEEP_COUNT}; do glance image-delete $delete; done
        ''')

        shell('''
# set older versions non-public
images=($(glance image-list --owner $OS_TENANT_ID --property name=$DIB_IMAGE_NAME | grep $DIB_IMAGE_NAME | awk -F'|' '{print $2}'))
images=${images:-}

# set all images non-public
for image in ${images[@]}; do glance image-update --visibility private $image; done
# rename new image
glance image-update --name $DIB_IMAGE_NAME --property description="All packages of this image were updated on $(date +%F)" \
--visibility public $(glance image-list | grep $TEMP_IMAGE_NAME | cut -d '|' -f2)
        ''')

    }
}

dashboardView('diskimage-builder') {
    jobs {
        regex(/dib*/)
    }
    columns {
        status()
        name()
        lastSuccess()
        lastFailure()
        lastDuration()
        buildButton()
    }
    topPortlets {
        jenkinsJobsList {
            displayName('image build jobs')
        }
    }
}
      ]]></scriptText>
    </javaposse.jobdsl.plugin.ExecuteDslScripts>
  </builders>
</project>
